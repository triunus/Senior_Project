UGUI (Unity Graphic User Interface)
 - Unity에서 제공하는 Unity Built-In UI
 - 추가 구매 없이 바로 사용이 가능하다.
 - 직관적인 UI 구성요소 간의 Depth 조절이 가능하다.
 - Canvas 단위로 Draw Call이 관리된다.
 - Sprite Atlas 관리 (폴더 단위로도 가능하다)
 - Particle Rendering 문제가 존재한다.
 - Tweening을 기본으로 지원하지 않는다.
 - 동적 할당이 쉽고 편하며, 효율이 NGUI보다 좋다.
 - UI 확장 에셋을 쉽게 구할 수 있으며, Unity에서도 지속적인 관리를 해준다.




Ⅰ. UI GameObject == UI Container

1. Canvas GameObject
 - Canvas는 모든 UI 요소(GameObject, Component)를 배치하는 영역이다.  <--- Component가 아닌, GameObject라 표현한 이유는, UI Component들의 Container 역할을 하기 때문이다.!!!!!!!
 - RectTransform, Canvas, CanvasScaler, GraphicRaycaster 컴포넌트를 보유한다. 
 
 - Scene View에 Canvas가 없을 때 UI를 생성하면 Canvas가 함께 생성된다.
 - Canvas의 영역은 Scene View에서 확인 가능하며, 사각형 범위 형태로 표시된다.
 - Canvas는 하나의 Scene에 여러 개 존재할 수 있다.
 ( Canvas에 배치되는 자식이 앞에 그려짐 <--- 객체의 우선순위 속성에 비슷한게 뭐 있었던거 같음)
 ( SetAsFirstSibling, SetAsLastSibling, SetSiblingIndex로 순서 변경이 가능하다.)


2. EventSystem GameObject
 - EventSystem은 Graphic Raycaster를 이용해 충돌된 오브젝트의 이벤트를 검출하는 수단이다.
 - 상호작용이 가능한 UI의 이벤트 처리를 담당한다.

 - Scene View에 EventSystem이 없을 때 Canvas나 UI를 생성하면 EventSystem이 함께 생성된다.
 - EventSystem은 하나의 Scene에 하나만 존재할 수 있다.



Ⅱ. UI Component

1. RectTransform Compoent
 - "RectTransform"은 "Transform"을 상속받아 만든 UI 전용 Transform 컴포넌트 이다.

 - Pivot과 Anchors를 설정할 수 있어 UI 배치 및 관리를 더욱 편리하게 할 수 있다.

 - Transform 컴포넌트와 마찬가지로 위치(position), 회전(rotation), 크기(scale)를 가진다.
 - 또한, 사각형의 치수를 결정하는 폭(width), 높이(height)를 가지고 있다.
 -> 이때, Anchors 속성의 수치에 따라서, 위치-폭-높이 변수가 left-rigth-top-bottom으로 변경되기도 한다.
 -> RectTransform을 사용하는 경우 Resizing은 Width, Height를 통해서만 하고, Scale 변수는 건드리지 않는 것을 권장한다.

1) 피벗(Pivot)
 - RectTransform 컴포넌트를 가지고 있는 오브젝트 본인의 중심점을 나타낸다.
 - 중심점의 위치에 따라 위치를 설정했을 때 배치되는 지점, 회전할 때 돌아가는 축, 크기 변화 등이 다르게 설정된다.  <---말의 뜻 확인해보자.

2) 앵커(Anchors)
 - 부모/자식 관계일 때 ( 두 객체 모두 RectTransform 컴포넌트가 있어야 한다. ), 자식 오브젝트가 부모의 특정 변이나 꼭지점을 기준으로 고정되게 하는 기능을 말한다.
 - 부모 오브젝트의 크기가 바뀔 때 고정된 축의 여백은 그대로 유지된다.
 - Anchor에 제공되는 Anchor Presets을 잘 이용하면, Anchor 설정이 굉장히 편리하다.!!!

 -> Anchor Presets (앵커 위치만 설정, Mouse Click)
 -> Anchor Presets (앵커 위치 + 객체 위치 동시 설정, Alt + Click)
 -> Anchor Presets (앵커 위치 + 객체 피벗 동시 설정, Shift + Click)
 -> Anchor Presets (앵커 위치 + 객체 위치 + 객체 피벗 동시 설정, Alt + Shift +Click) 
 ---> '패널-버튼'을 통해서 각 속성에 대한 UI 출력을 확인해 보자.



2. Canvas Component
 - Canvas 컴포넌트는 UI가 배치되고, 화면에 랜더링되는 추상 공간을 나타낸다.

1) Render Mode 속성
 - UI가 화면에 랜더링 되는 방법
 - Screen Space - Overlay, Screen Sapce - Camera, World Space의 3 종류가 있다.

(1) Screen Space - Overlay
 - 가장 흔히 사용되는 UI 배치 방법으로 UI가 월드의 오브젝트보다 앞에 그려진다.
 - Render Mode가 Screen Space일 때 UI가 랜더링되는 추상 공간의 크기는 게임 화면의 크기와 같게 설정된다.
  --> RectTransform이 잠겨서 임의 설정이 불가능하다.
 - Canvas는 게임 화면의 크기와 동일하게 설정되고, 카메라에 비춰지지 않고 별도로 화면에 출력된다.
  --> 화면에 보이는 UI가 다른 GameObject에 가려지지 않는다. (마치 카메라 액정에 UI가 달라붙어 있는 것 같음)

(2) Screen Space - Camera
 - UI가 그려지는 위치는 Render Camera와의 거리(Plane Distance 속성)로 설정된다.
 - Canvas가 카메라와 고정된 거리(Plane Distance 속성)를 유지하며 카메라를 쫒아다니는 것을 볼 수 있다.

(3) World Space
 - 월드에 배치된 오브젝트와 동일하게 카메라의 시야 내에서만 화면에 보인다.
 - Redner Mode가 World Space일 때는 게임 월드에 배치된 오브젝트와 동일하기 때문에,
  RectTransform에서 위치, 크기 등을 자유롭게 수정할 수 있다.
  --> Canvas가 특정 위치에 고정되어 카메라의 시야에서 사라지면 Canvas에 배치된 UI가 보이지 않는다.


2) Pixel Perfact 속성
 - Anti-Aliasing 없이 UI를 정밀하게 랜더링 할 때 사용한다.


3) Render Camera 속성
 - UI를 랜더링 하는데 사용되는 카메라를 나타낸다.


4) Plane Distance 속성
 - 카메라(Render Camera)와 UI 사이의 거리를 나타낸다.


5) Event Camera
 - UI 이벤트를 처리하는데 사용되는 카메라이다.
 


3. Canvas Scaler Component
 - Canvas에 배치된 모든 UI 요소의 크기, 픽셀 밀도를 제어하는데 사용한다.
 - Canvas Scaler 컴포넌트는 Canvas 아래에 배치된 모든 UI에 영향을 줍니다. (글꼴 크기, 이미지 테두리 등)
  --> Canvas Scaler 옵션이 바뀌었을 경우 이미 배치가 완료된 UI의 크기, 위치 등이 바뀔 수 있기 때문에 UI 설정 중 가장 먼저 해야한다.!!!!

 - Canvas Scaler는 게임에 존재하는 모든 Scene에 사용되고 있는 Canvas 오브젝트를 모두 설정해야 한다.

1) UI Scale Mode 속성

(1) Constant Pixel Size
 - 화면 크기에 관계 없이 UI의 위치나 크기가 픽셀에 대한 단순한 배율로 지정된다.
  --> 화면 크기에 관계없다는 것이 매우 중요하다!!!
  --> 화면에 잘려나가는 한이 있어도, 크기를 고집한다는 뜻이다.!!
    --> 화면의 해상도(Canvas 크기)가 바뀌게 되면 동일한 거리 만큼을 유지하기 때문에 화면에 보이던 UI가 보이지 않을 수 있다.

  ----> 현재 해상도의 크기에 따라 배치된 UI의 위치가 크게 바뀌기 때문에 해상도와 동일한 크기의 Game View에서 작업하는 경우가 아니라면, 기기에 넣었을 때 위치와 크기가 굉장히 다르게 나올 것이다.
         또한 여러 해상도를 가지는 다양한 기기에 넣었을 때도 마찬가지의 결과를 볼 수 있다.

(1 -1) Scale Factor 속성
 - Canvas 아래에 배치되는 모든 UI 요소의 화면 내 비율

(1 -2) Reference Pixels per Unit 속성
 - Image 컴포넌트를 가지는 UI의 경우 Sprite에 'Pixels per Unit' 설정이 있으면, Sprite의 1 픽셀 = UI의 1 Unit


(2) Scale With Screen Size
 - 화면의 크기에 따라 UI의 위치나 크기가 함께 수정된다.
  --> 모바일 기기는 화면 비율이 제각각이기 때문에, Scale With Screen Size 모드가 가장 많이 사용된다.
  --> 화면의 해상도가 바뀌면 그에 따라 UI의 위치, 크기가 바뀌게 된다. 

(2-1) Reference Resolution
 - UI의 적정 해상도 크기를 설정.

(2-2) Screen Match Mode
 - 현재 해상도의 종횡비가 Reference Resolution과 같지 않을 때, Canvas 영역 크기를 설정할 때 사용되는 모드이다. ( <-- 기기별 화면 크기와 종횡비가 다르기 때문에 발생하는 문제)
 
(2-2-1) Mathch Width Or Height
 - Canvas 영역의 Width 또는 height를 기준으로 Canvas 영역을 설정.
  --> Match 변수는 Width 또는 Height 중 어느 쪽을 더 정확하게 맞출 지 설정한다. (보통 0.5로 설정하여 중립을 유지한다.

(2-2-2) Expand
 - Canvas 크기가 Reference Resolution보다 작아지지 않도록 Canvas 영역을 수평 또는 수직으로 확장한다. <- 다른 컴포넌트를 조절하넼ㅋㅋ

(2-2-3) Shrink
 - Canvas 크기가 Reference Resolution보다 커지지 않도록 Canvas를 수평 또는 수직으로 자른다. <- 사용하지 않는게 좋을 듯...


(3) Constant Physical Size
 - 화면의 크기에 관계 없이 UI 요소가 동일한 물리적인 크기로 유지되는 모드입니다.




4. Graphic Raycaster
 - Canvas 오브젝트 하위에 배치된 UI 요소들에 광선을 쏴서 충돌처리를 한다.

 - "Canvas" 컴포넌트의 Render Mode 속성이 Screen Space - Overlay 값을 갖는 경우,
  카메라를 사용하지 않고 렌더링 과정에서 그려진 오브젝트들 위에 UI를 덧그린다.
 - 이때, Canvas 안을 검색하는 Raycaster가 Graphic Raycaster이며, EventSystem이 이벤트를 검출하는 수단으로 사용된다.

